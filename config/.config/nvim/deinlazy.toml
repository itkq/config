[[plugins]]
repo = 'Shougo/context_filetype.vim'


# ==========================================================
# deoplete
# ==========================================================

[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = 'context_filetype.vim'
on_i = 1
hook_source = '''
" <TAB>: completion.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ deoplete#manual_complete()
function! s:check_back_space() abort "{{{
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction"}}}

" <S-TAB>: completion back.
inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<C-h>"

" <BS>: close popup and delete backword char.
inoremap <expr><BS> deoplete#smart_close_popup()."\<C-h>"

" Use auto delimiter
call deoplete#custom#set('_', 'converters', [
      \ 'converter_remove_paren',
      \ 'converter_remove_overlap',
      \ 'converter_truncate_abbr',
      \ 'converter_truncate_menu',
      \ 'converter_auto_delimiter',
\ ])

let g:deoplete#enable_camel_case = 1
'''

[[plugins]]
repo = 'zchee/deoplete-jedi'
# depends = 'deoplete.nvim'
on_ft = 'python'
hook_source = '''
if has('unix')
  let g:python_host_prog = '/usr/bin/python2'
  let g:python3_host_prog = '/usr/bin/python3'
endif
if has('mac')
  let g:python_host_prog = '/usr/local/bin/python2'
  let g:python3_host_prog = '/usr/local/bin/python3'
endif
'''

[[plugins]]
repo = 'zchee/deoplete-clang'
# depends = 'deoplete.nvim'
on_ft = ['c', 'cc', 'cpp']
hook_add = '''
let g:deoplete#sources#clang#libclang_path = '/Library/Developer/CommandLineTools/usr/lib/libclang.dylib'
let g:deoplete#sources#clang#clang_header = '/Library/Developer/CommandLineTools/usr/lib/clang'
'''

[[plugins]]
repo = 'uplus/deoplete-solargraph'
# depends = 'deoplete.nvim'
on_ft = ['ruby']

[[plugins]]
repo = 'zchee/deoplete-go'
# depends = 'deoplete.nvim'
on_ft = 'go'
build = 'make'
hook_source = '''
let g:deoplete#sources#go#gocode_binary = $GOPATH.'/bin/gocode'
let g:deoplete#sources#go#sort_class = ['package', 'func', 'type', 'var', 'const']
let g:deoplete#sources#go#use_cache = 1
let g:deoplete#sources#go#json_directory = '~/.cache/deoplete/go/$GOOS_$GOARCH'
'''


# ==========================================================
# filer
# ==========================================================

[[plugins]]
repo = 'Shougo/unite.vim'

[[plugins]]
repo = 'Shougo/vimfiler.vim'
depends = 'unite.vim'
hook_add = '''
let g:vimfiler_safe_mode_by_default = 0
let g:vimfiler_as_default_explorer = 1
nnoremap <silent> <Leader>e :<C-U>VimFiler -buffer-name=explorer -split -simple -winwidth=35 -toggle -no-quit<CR>
nnoremap <silent> <Leader>E :<C-U>VimFiler<CR>

let g:vimfiler_tree_leaf_icon = ' '
let g:vimfiler_tree_opened_icon = '▾'
let g:vimfiler_tree_closed_icon = '▸'
let g:vimfiler_file_icon = ' '
let g:vimfiler_marked_file_icon = '*'
'''

# ==========================================================
# denite
# ==========================================================

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'Shougo/denite.nvim'
depends = ['neomru.vim']
on_event = 'BufRead'
hook_add = '''
nnoremap <silent> ,r :<C-u>Denite -buffer-name=mru -highlight-mode-insert=Search file_mru<CR>
nnoremap <silent> ,b :<C-u>DeniteBufferDir -highlight-mode-insert=Search -buffer-name=buffer -auto-preview file_rec<CR>
nnoremap <silent> ,f :<C-u>DeniteProjectDir -highlight-mode-insert=Search -buffer-name=files -auto-preview file_rec<CR>
nnoremap <silent> ,l :<C-u>Denite -highlight-mode-insert=Search outline<CR>
'''
hook_post_source = '''
if executable('rg')
  call denite#custom#var('file_rec', 'command',
        \ ['rg', '--files', '--glob', '!.git'])
  call denite#custom#var('grep', 'command', ['rg'])
endif

call denite#custom#map('normal', '<C-n>', '<denite:move_to_next_line>')
call denite#custom#map('normal', '<C-p>', '<denite:move_to_previous_line>')
call denite#custom#map('insert', '<C-n>', '<denite:move_to_next_line>')
call denite#custom#map('insert', '<C-p>', '<denite:move_to_previous_line>')
call denite#custom#map('insert', '<C-j>', '<denite:assign_next_text>')
call denite#custom#map('insert', '<C-k>', '<denite:assign_previous_text>')

call denite#custom#map('insert', '<C-s>', '<denite:do_action:split>')
call denite#custom#map('insert', '<C-i>', '<denite:do_action:vsplit>')
call denite#custom#map('insert', '<C-o>', '<denite:do_action:tabopen>')

call denite#custom#map('insert', 'jj', '<denite:enter_mode:normal>')
call denite#custom#map('insert', 'jf', '<denite:enter_mode:normal>')

call denite#custom#option('default', 'prompt', '>')
"
" call denite#custom#source(
"     \ 'file_rec', 'matchers', ['matcher_fuzzy', 'matcher_project_files', 'matcher_ignore_globs'])

" call denite#custom#filter('matcher_ignore_globs', 'ignore_globs',
"     \ [ '.git/', '.ropeproject/', '__pycache__/',
"     \   'venv/', 'images/', '*.min.*', 'img/', 'fonts/',
"     \   'vendor/', '*.o'])
'''


[[plugins]]
repo = 'ujihisa/neco-look'
on_source = ['neocomplete.vim', 'deoplete.nvim']

[[plugins]]
repo = 'racer-rust/vim-racer'
on_ft = 'rust'
hook_source = '''
let g:racer_cmd = "~/.cargo/bin/racer"
'''

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = 'context_filetype.vim'
on_ft = ['vim', 'html', 'toml']


# ==========================================================
# lang
# ==========================================================

[[plugins]]
repo = 'Shougo/neco-vim'
on_ft = 'vim'

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'vim-jp/cpp-vim'
on_ft = ['cpp']

[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = 'rust'
hook_source = '''
let g:rustfmt_autosave = 1
'''

[[plugins]]
repo = 'fatih/vim-go'
on_ft = 'go'
hook_source = '''
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_fields = 1
let g:go_highlight_types = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
'''

[[plugins]]
repo = 'hynek/vim-python-pep8-indent'
on_ft = 'python'

[[plugins]]
repo = 'elzr/vim-json'
on_ft = 'json'

[[plugins]]
repo = 'hail2u/vim-css3-syntax'
on_ft = 'css'

[[plugins]]
repo = 'mxw/vim-jsx'
on_ft = 'javascript'

[[plugins]]
repo = 'leafgarland/typescript-vim'
on_ft = 'typescript'

[[plugins]]
repo = 'dag/vim-fish'
on_ft = 'fish'

[[plugins]]
repo = 'tikhomirov/vim-glsl'
on_ft = 'glsl'

[[plugins]]
repo = 'neovimhaskell/haskell-vim'
on_ft = ['haskell', 'cabal']

[[plugins]]
repo = 'rhysd/vim-gfm-syntax'
on_ft = ['markdown', 'mkd']

[[plugins]]
repo = 'udalov/kotlin-vim'
on_ft = 'kotlin'

[[plugins]]
repo = 'keith/swift.vim'
on_ft = 'swift'

[[plugins]]
repo = 'posva/vim-vue'
on_ft = 'vue'

[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = 'html'

[[plugins]]
repo = 'tpope/vim-endwise'
on_i = 1
on_ft = ['ruby']

[[plugins]]
repo = 'chr4/nginx.vim'
on_ft = ['nginx']

[[plugins]]
repo = 'google/vim-jsonnet'
on_ft = ['jsonnet']

# ==========================================================
# gtags
# ==========================================================

[[plugins]]
repo = 'lighttiger2505/gtags.vim'
on_ft = ['c', 'cpp', 'ruby']
hook_add = '''
" let g:Gtags_Auto_Map = 0
let g:Gtags_OpenQuickfixWindow = 1
nnoremap <C-g> :Gtags
nnoremap <C-h> :Gtags -f %<CR>
nnoremap <C-j> :GtagsCursor<CR>
nnoremap <C-n> :cn<CR>
nnoremap <C-n> :cn<CR>
nnoremap <C-p> :cp<CR>
'''

[[plugins]]
repo = 'zebult/auto-gtags.vim'
depends = 'gtags.vim'
hook_add = '''
let g:auto_update_gtags = 1
'''
